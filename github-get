#!/bin/sh

# github-get/github-get

set -eu

_list="false"

usage() {
    cat <<EOF
Usage: $(basename ${0}) [OPTION]... GITHUB_URL [RELEASE]...
Get (or list) releases on github projects.

Options:
    -h   print usage and exit
    -l   list releases

Examples:
    $(basename ${0}) https://github.com/tianocore/edk2 vUDK2017
    $(basename ${0}) -l https://github.com/nodejs/node
EOF
}

die() { { echo "ERROR: ${@}"; usage; } >&2; exit 1; }

# take a github url, return a version-sorted list of release tags
release_list() {
    curl -fsL "${@}/releases" \
        | grep -Eo "[^\"]+\.tar\.gz" \
        | sed -r 's|.+/archive/(.+)\.tar\.gz$|\1|g' \
        | sort -Vu
}

while getopts ":hl" opt; do
    case "${opt}" in
        h) usage; exit 0;;
        l) _list="true";;
        \?) die "bad option: -${OPTARG}";;
    esac
done
shift $((${OPTIND} - 1))

[ 0 -lt ${#} ] || die "bad args"
github_url="${1}"
if [ "true" = "${_list}" ]; then
    release_list "${github_url}"
    exit ${?}
fi
shift
project="$(basename ${github_url})"
for release in ${@:-$(release_list ${github_url} | tail -1)}; do
    # force a debian convention: project, underscore, version (without any
    # embedded solidi)
    project_version="${project}_$(echo ${release} | tr -d '/')"
    curl -fLo ${project_version}.tar.gz ${github_url}/archive/${release}.tar.gz
    mkdir -vp ${project_version}
    tar -C ${project_version} --strip-components 1 -xf ${project_version}.tar.gz
    ln -vsnf ${project_version} ${project}
done
