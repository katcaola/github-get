#!/bin/sh

# github-get/github-get

set -eu

usage() {
    cat <<EOF
Usage: $(basename ${0}) [OPTION]... OWNER/PROJECT [RELEASE]...
Get (or list) releases on github projects.

Options:
    -h   print usage and exit
    -l   list releases

Examples:
    $(basename ${0}) https://github.com/tianocore/edk2 vUDK2017
    $(basename ${0}) -l https://github.com/nodejs/node
EOF
}

die() { { echo "ERROR: ${@}"; usage; } >&2; exit 1; }

while getopts ":hl" opt; do
    case "${opt}" in
        h) usage; exit 0;;
        l) do_list="true";;
        \?) die "bad option: -${OPTARG}";;
    esac
done
shift $((${OPTIND} - 1))

[ 0 -lt ${#} ] || die "bad args"
owner="$(basename $(dirname ${1}))"
project="$(basename ${1})"
tarball_urls=$(mktemp --suffix=.tarball.urls)
curl -fsL "https://api.github.com/repos/${owner}/${project}/tags" \
    | sed -nr '/"tarball_url":/{s/^.*"tarball_url": "([^"]+)",$/\1/gp}' \
    | tac >${tarball_urls}
releases=$(mktemp --suffix=.releases)
<${tarball_urls} xargs basename -a >${releases}

if [ "true" = "${do_list:-false}" ]; then
    cat ${releases}
    exit ${?}
fi
shift
for release in ${@:-$(tail -1 ${releases})}; do
    # force a debian convention: project, underscore, version (without any
    # embedded solidi)
    project_version="${project}_$(echo ${release} | tr -d '/')"
    curl -fLo ${project_version}.tar.gz \
        https://api.github.com/repos/${owner}/${project}/tarball/${release}
    mkdir -vp ${project_version}
    tar -C ${project_version} --strip-components 1 -xf ${project_version}.tar.gz
    ln -vsnf ${project_version} ${project}
done
